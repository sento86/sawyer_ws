<?xml version="1.0" encoding="utf-8"?>
<launch>

  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="verbose" default="true"/>
  <arg name="head_display_img" default="$(find sawyer_gazebo)/share/images/sawyer_sdk_research.png"/>

  <!-- These arguments load the electric grippers, for example electric_gripper:=true -->
  <arg name="electric_gripper" default="false"/>

  <param name="img_path_head_display" value="$(arg head_display_img)"/>

  <!-- Load the URDF into the ROS Parameter Server -->
  <!-- This xacro will pull in sawyer.urdf.xacro, and right_end_effector.urdf.xacro
       Note: if you set this to false, you MUST have set the robot_description prior
             to launching sawyer_world -->
  <arg name="load_robot_description" default="true"/>
  <param if="$(arg load_robot_description)" name="robot_description"
      command="$(find xacro)/xacro --inorder $(find polish_sr300)/urdf/sawyer_polish.urdf.xacro
      gazebo:=true electric_gripper:=$(arg electric_gripper)"/>


<!--  <param name="robot_description" command="cat /home/lr101095/tmp/SawyerHRI/projects/ROS_polish/polish_sr300/urdf/result_mod.urdf" />-->
<!--  <param name="robot_description" command="cat /home/lr101095/tmp/SawyerHRI/projects/ROS_polish/polish_sr300/urdf/result_def.urdf" />-->
<!--  <param name="robot_description" command="cat /home/lr101095/tmp/SawyerHRI/projects/ROS_polish/polish_sr300/urdf/hardcode3.urdf" />-->

  <!-- Load Parameters to the ROS Parameter Server -->

  <rosparam command="load" file="$(find sawyer_gazebo)/config/config.yaml" />
  <rosparam command="load" file="$(find sawyer_description)/params/named_poses.yaml" />
  <rosparam command="load" file="$(find sawyer_gazebo)/config/acceleration_limits.yaml" />
  <param name="robot/limb/right/root_name" value="base" />
  <param if="$(arg electric_gripper)" name="robot/limb/right/tip_name"
         value="right_gripper_tip" />
  <param unless="$(arg electric_gripper)" name="robot/limb/right/tip_name"
         value="right_hand" />

  <param name="robot/limb/right/camera_name" value="right_hand_camera" />
  <param if="$(arg electric_gripper)"     name="robot/limb/right/gravity_tip_name"
         value="right_gripper_tip" />
  <param unless="$(arg electric_gripper)" name="robot/limb/right/gravity_tip_name"
         value="right_hand" />


  <!-- We resume the logic in empty_world.launch, changing the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
<!--    <arg name="world_name" value="$(find polish_sr300)/worlds/sawyer_polish.world"/>-->
    <arg name="world_name" value="$(find polish_sr300)/worlds/sawyer_polish_table.world"/>
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="verbose" value="$(arg verbose)"/>
  </include>

  <!-- Publish a static transform between the world and the base of the robot -->
  <node pkg="tf2_ros" type="static_transform_publisher" name="base_to_world" args="0 0 0 0 0 0 1 world base" />

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
   <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-param robot_description -urdf -z 0.93 -model sawyer
              -J sawyer::right_j0 -0.00607772902471
              -J sawyer::right_j1 -1.53009828935
              -J sawyer::right_j2 0.0104289995848
              -J sawyer::right_j3 0.951959929873
              -J sawyer::right_j4 -0.0598082301976
              -J sawyer::right_j5 1.99154196727
              -J sawyer::right_j6 -3.096116843548" /> <!-- 0.0265941 0.785398163 1.570796327 3.141592654-->

<!-- original start pose -->
<!-- -0.272659 1.04701 -0.00123203 0.49262 -0.0806423 -0.0620532 0.0265941 -->

<!-- joint_vel_smc starting pose -->
<!-- 0.0220263671875 -0.4779541015625 -0.0312109375 1.3845087890625 0.0467080078125 0.6515537109375 3.284783203125 -->

<!-- TSCT17_LR start pose -->
<!-- -0.006259765625, -1.1291142578125, 0.0050166015625, 1.9478134765625, 0.0013515625, 0.7445380859375, 3.3209453125 -->

<!-- up start pose to avoid cylinder at start up -->
<!-- -0.0043037109375, -1.13424609375, 0.01132421875, 1.48883691406, -0.0083046875, 1.17732617188, 3.32613671875 -->

<!-- upstart pose to provide camera with appropriate intial view -->
<!-- -0.00607772902471 -1.53009828935 0.0104289995848 0.951959929873 -0.0598082301976 1.99154196727 3.096116843548-->

  <!-- ros_control sawyer launch file -->
  <include file="$(find sawyer_sim_controllers)/launch/sawyer_sim_controllers.launch">
      <arg name="electric_gripper" value="$(arg electric_gripper)"/>
      <arg name="gui" value="$(arg gui)" />
  </include>

  <!-- sawyer cameras launch file -->
  <arg name="wrist_camera" default="right_hand_camera" />
  <arg name="head_camera"  default="head_camera" />
  <include file="$(find sawyer_gazebo)/launch/sawyer_sim_cameras.launch">
      <arg name="wrist_camera" value="$(arg wrist_camera)" />
      <arg name="head_camera" value="$(arg head_camera)" />
  </include>


  <!-- Publish a static transform between the world and the base of the robot -->
  <node pkg="rosbag" type="play" name="io_robot" args="-l $(find sawyer_gazebo)/share/bags/robot_io.bag" />

  <!-- Load Rviz -->
  <node name="$(anon rviz)" pkg="rviz" type="rviz" respawn="false"
        args="-d $(find polish_sr300)/config/sawyer_polish.rviz" output="screen">
  </node>

  <!-- dictate initial pose -->
<!--  <node name="pose_start" pkg="polish_sr300" type="IK_Sample.py" />-->

  <!-- start transform_cloud.cpp -->
<!--  <node name="transform_cloud" pkg="polish_sr300" type="transform_cloud" respawn="true"/>-->

  <!-- start flag listener -->
<!--  <node name="flag_listener" pkg="polish_sr300" type="flag_listener_test.py" respawn="true"/>-->

  <!-- joint keyboard position control -->
<!--  <node name="keyboard_control" pkg="intera_examples" type="joint_position_keyboard.py" respawn="true"/>-->

  <!-- rqt_plot -->
<!--  <node name="rqt_plot" pkg="rqt_plot" type="rqt_plot"/>-->

</launch>
